{"version":3,"sources":["../cli/index.ts","../cli/commands/init.ts","../cli/utils/logger.ts","../cli/commands/prisma.ts","../cli/utils/db.ts","../cli/utils/db-prompts.ts","../package.json"],"sourcesContent":["import { Command } from \"commander\"\nimport { initCommand } from \"./commands/init\"\nimport { prismaCommand } from \"./commands/prisma\"\nimport packageJson from \"../package.json\"\n\nconst program = new Command()\n\nprogram\n  .name(\"shadpanel\")\n  .description(\"ShadPanel CLI - Build admin panels with Next.js and shadcn/ui\")\n  .version(packageJson.version)\n\n// shadpanel init - Initialize new project with create-shadpanel-next\nprogram\n  .command(\"init\")\n  .description(\"Initialize a new ShadPanel project\")\n  .argument(\"[project-name]\", \"Project directory name\")\n  .action(initCommand)\n\n// Register prisma/db commands (shadpanel db:init, etc.)\nprogram.addCommand(prismaCommand())\n\nprogram.parse()\n","import { execSync } from \"child_process\"\nimport prompts from \"prompts\"\nimport { logger } from \"../utils/logger\"\n\nexport async function initCommand(projectName?: string): Promise<void> {\n  try {\n    logger.welcome()\n\n    // Prompt for project name if not provided\n    let finalProjectName = projectName\n\n    if (!finalProjectName) {\n      const response = await prompts({\n        type: \"text\",\n        name: \"projectName\",\n        message: \"What is your project name?\",\n        initial: \"my-shadpanel-app\",\n        validate: (value: string) =>\n          value.length > 0 ? true : \"Project name is required\",\n      })\n\n      if (!response.projectName) {\n        logger.error(\"Project name is required\")\n        process.exit(1)\n      }\n\n      finalProjectName = response.projectName\n    }\n\n    // Run npx create-shadpanel-next {project-name}\n    logger.info(`Creating your ShadPanel project: ${finalProjectName}`)\n    logger.newline()\n\n    const spinner = logger.spinner(\"Running create-shadpanel-next...\")\n    spinner.start()\n\n    try {\n      execSync(`npx create-shadpanel-next ${finalProjectName}`, {\n        stdio: \"inherit\",\n        cwd: process.cwd(),\n      })\n      spinner.succeed(\"Project created successfully!\")\n    } catch (error) {\n      spinner.fail(\"Failed to create project\")\n      throw error\n    }\n\n    logger.newline()\n    logger.success(\"‚ú® Done! Your ShadPanel project is ready.\")\n    logger.newline()\n    logger.info(\"üìö Next steps:\")\n    logger.info(`   1. cd ${finalProjectName}`)\n    logger.info(\"   2. Run 'shadpanel db:init' to set up your database (optional)\")\n    logger.info(\"   3. npm run dev\")\n    logger.newline()\n  } catch (error) {\n    logger.error(\"Failed to initialize project\")\n    console.error(error)\n    process.exit(1)\n  }\n}\n","import chalk from \"chalk\"\nimport ora, { Ora } from \"ora\"\n\nexport const logger = {\n  // Info messages\n  info: (message: string) => {\n    console.log(chalk.blue(\"‚Ñπ\"), message)\n  },\n\n  // Success messages\n  success: (message: string) => {\n    console.log(chalk.green(\"‚úî\"), message)\n  },\n\n  // Warning messages\n  warn: (message: string) => {\n    console.log(chalk.yellow(\"‚ö†\"), message)\n  },\n\n  // Error messages\n  error: (message: string) => {\n    console.log(chalk.red(\"‚úñ\"), message)\n  },\n\n  // Create a spinner\n  spinner: (text: string): Ora => {\n    return ora({\n      text,\n      spinner: \"dots\",\n    })\n  },\n\n  // Print welcome banner\n  welcome: () => {\n    console.log()\n    console.log(\n      chalk.bold.cyan(\"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\")\n    )\n    console.log(\n      chalk.bold.cyan(\"‚îÇ                                                 ‚îÇ\")\n    )\n    console.log(\n      chalk.bold.cyan(\"‚îÇ   Welcome to ShadPanel CLI                      ‚îÇ\")\n    )\n    console.log(\n      chalk.bold.cyan(\"‚îÇ   Admin Panels Built on shadcn/ui               ‚îÇ\")\n    )\n    console.log(\n      chalk.bold.cyan(\"‚îÇ                                                 ‚îÇ\")\n    )\n    console.log(\n      chalk.bold.cyan(\"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\")\n    )\n    console.log()\n  },\n\n  // Print completion message\n  complete: (projectName: string, devCommand: string, installationType?: string, isCurrentDir?: boolean) => {\n    console.log()\n\n    // Different message based on installation type\n    if (installationType === \"full-panel\") {\n      console.log(chalk.green.bold(\"‚ú® Done! Your ShadPanel admin panel is ready.\"))\n    } else if (installationType === \"auth-components\") {\n      console.log(chalk.green.bold(\"‚ú® Done! Authentication and components are installed.\"))\n    } else if (installationType === \"components-only\") {\n      console.log(chalk.green.bold(\"‚ú® Done! ShadPanel components are installed.\"))\n    } else {\n      console.log(chalk.green.bold(\"‚ú® Done! Your ShadPanel project is ready.\"))\n    }\n\n    console.log()\n    console.log(chalk.bold(\"üöÄ Get started:\"))\n\n    // Only show \"cd\" if not current directory\n    if (!isCurrentDir) {\n      console.log(chalk.cyan(`  cd ${projectName}`))\n    }\n\n    console.log(chalk.cyan(`  ${devCommand}`))\n\n    if (installationType === \"full-panel\") {\n      console.log()\n      console.log(chalk.yellow(\"‚ö†Ô∏è  Don't forget:\"))\n      console.log(chalk.cyan(`  ‚Ä¢ Open .env and configure your authentication providers`))\n    }\n\n    console.log()\n    console.log(chalk.bold(\"üìö Documentation:\"), chalk.cyan(\"https://github.com/kristiansnts/shadpanel\"))\n    console.log()\n  },\n\n  // Print a blank line\n  newline: () => {\n    console.log()\n  },\n}\n","import { Command } from \"commander\"\nimport { execSync } from \"child_process\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { logger } from \"../utils/logger\"\nimport { generatePrismaSchema } from \"../utils/db\"\nimport { promptDatabaseInit, createEnvFile } from \"../utils/db-prompts\"\n\n// Check if Prisma is already installed\nfunction isPrismaInstalled(projectDir: string): boolean {\n  try {\n    const packageJsonPath = path.join(projectDir, \"package.json\")\n    if (!fs.existsSync(packageJsonPath)) {\n      return false\n    }\n\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf-8\"))\n    const hasPrismaClient = packageJson.dependencies?.[\"@prisma/client\"]\n    const hasPrismaCli = packageJson.devDependencies?.[\"prisma\"]\n\n    return !!(hasPrismaClient || hasPrismaCli)\n  } catch (error) {\n    return false\n  }\n}\n\nexport function prismaCommand(): Command {\n  const db = new Command(\"db\")\n    .description(\"Database management commands (Prisma)\")\n\n  // db:init - Interactive database setup\n  db.command(\"init\")\n    .description(\"Initialize database configuration interactively\")\n    .action(async () => {\n      try {\n        logger.info(\"üóÑÔ∏è  Let's set up your database!\\n\")\n\n        const projectDir = process.cwd()\n\n        // Check if Prisma is already installed\n        const prismaAlreadyInstalled = isPrismaInstalled(projectDir)\n\n        // Step 1: Prompt for database configuration\n        const answers = await promptDatabaseInit(prismaAlreadyInstalled)\n\n        if (!answers) {\n          logger.error(\"Database initialization cancelled\")\n          process.exit(1)\n        }\n\n        // Step 2: Create .env file with template\n        const spinner1 = logger.spinner(\"Creating environment configuration...\")\n        spinner1.start()\n        await createEnvFile(projectDir, answers.driver)\n        spinner1.succeed(\"Environment configuration created (.env)\")\n\n        // Step 3: Create prisma directory and template\n        const spinner2 = logger.spinner(\"Setting up Prisma files...\")\n        spinner2.start()\n\n        const prismaDir = path.join(projectDir, \"prisma\")\n        await fs.ensureDir(prismaDir)\n\n        const templatePath = path.join(prismaDir, \"schema.prisma.template\")\n        const defaultTemplate = `datasource db {\n  provider = \"{{DATABASE_DRIVER}}\"\n  url      = \"{{DATABASE_URL}}\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// Add your models here\n// Example:\n// model User {\n//   id        Int      @id @default(autoincrement())\n//   email     String   @unique\n//   name      String?\n//   createdAt DateTime @default(now())\n//   updatedAt DateTime @updatedAt\n// }\n`\n        await fs.writeFile(templatePath, defaultTemplate)\n        spinner2.succeed(\"Prisma files created\")\n\n        // Step 4: Install Prisma packages if requested\n        if (answers.installPrisma) {\n          const spinner3 = logger.spinner(\n            `Installing Prisma with ${answers.packageManager}...`\n          )\n          spinner3.start()\n\n          try {\n            const pmCommands = {\n              npm: \"npm install @prisma/client && npm install -D prisma\",\n              pnpm: \"pnpm add @prisma/client && pnpm add -D prisma\",\n              yarn: \"yarn add @prisma/client && yarn add -D prisma\",\n              bun: \"bun add @prisma/client && bun add -D prisma\",\n            }\n\n            execSync(pmCommands[answers.packageManager], {\n              stdio: \"inherit\",\n              cwd: projectDir,\n            })\n            spinner3.succeed(\"Prisma packages installed\")\n          } catch (error) {\n            spinner3.fail(\"Failed to install Prisma packages\")\n            logger.warn(\n              `You can install manually with: ${answers.packageManager} install @prisma/client prisma`\n            )\n          }\n        }\n\n        // Success message\n        logger.newline()\n        logger.success(\"‚úÖ Database setup complete!\")\n        logger.newline()\n        logger.info(\"üìù Next steps:\")\n        logger.info(\"   1. Edit your .env file with actual database credentials\")\n        logger.info(\"   2. Edit prisma/schema.prisma.template to add your models\")\n        logger.info(\"   3. Run 'shadpanel db generate-schema' to generate schema.prisma\")\n        logger.info(\"   4. Edit prisma/schema.prisma to add/modify models\")\n        logger.info(\"   5. Run 'shadpanel db migrate' to create migrations\")\n        logger.info(\"   6. Run 'shadpanel db generate' to generate Prisma Client\")\n        logger.info(\"   7. Run 'shadpanel db studio' to browse your database\")\n        logger.newline()\n        logger.warn(\"‚ö†Ô∏è  Important:\")\n        logger.info(\"   ‚Ä¢ Edit schema.prisma for one-time changes\")\n        logger.info(\"   ‚Ä¢ Edit schema.prisma.template for reusable templates\")\n        logger.info(\"   ‚Ä¢ Use --regenerate flag to regenerate from template\")\n        logger.newline()\n        logger.info(`üí° Tip: Your .env has been configured for ${answers.driver.toUpperCase()}`)\n      } catch (error) {\n        logger.error(\"Failed to initialize database\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:generate-schema - Generate Prisma schema from template\n  db.command(\"generate-schema\")\n    .description(\"Generate prisma/schema.prisma from template using config\")\n    .action(async () => {\n      try {\n        const spinner = logger.spinner(\"Generating Prisma schema from template...\")\n        spinner.start()\n\n        await generatePrismaSchema()\n\n        spinner.succeed(\"Prisma schema generated successfully!\")\n      } catch (error) {\n        logger.error(\"Failed to generate schema\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:generate - Generate schema + Prisma Client\n  db.command(\"generate\")\n    .description(\"Generate Prisma schema and Prisma Client\")\n    .action(async () => {\n      try {\n        // Step 1: Generate schema\n        const spinner1 = logger.spinner(\"Generating Prisma schema from template...\")\n        spinner1.start()\n        await generatePrismaSchema()\n        spinner1.succeed(\"Prisma schema generated\")\n\n        // Step 2: Generate Prisma Client\n        const spinner2 = logger.spinner(\"Generating Prisma Client...\")\n        spinner2.start()\n        execSync(\"npx prisma generate\", { stdio: \"inherit\" })\n        spinner2.succeed(\"Prisma Client generated\")\n\n        logger.newline()\n        logger.success(\"Database setup complete!\")\n      } catch (error) {\n        logger.error(\"Failed to generate Prisma Client\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:migrate - Run migrations (without regenerating schema)\n  db.command(\"migrate\")\n    .description(\"Run database migrations\")\n    .argument(\"[name]\", \"Migration name\")\n    .option(\"--regenerate\", \"Regenerate schema from template before migrating\")\n    .action(async (name?: string, options?: { regenerate?: boolean }) => {\n      try {\n        // Step 1: Optionally regenerate schema from template\n        if (options?.regenerate) {\n          const spinner1 = logger.spinner(\"Generating Prisma schema from template...\")\n          spinner1.start()\n          await generatePrismaSchema()\n          spinner1.succeed(\"Prisma schema generated from template\")\n        }\n\n        // Step 2: Run migrations\n        const spinner2 = logger.spinner(\"Running database migrations...\")\n        spinner2.start()\n        const migrateCmd = name\n          ? `npx prisma migrate dev --name ${name}`\n          : \"npx prisma migrate dev\"\n        execSync(migrateCmd, { stdio: \"inherit\" })\n        spinner2.succeed(\"Migrations applied\")\n\n        logger.newline()\n        logger.success(\"Database migration complete!\")\n      } catch (error: any) {\n        logger.newline()\n        logger.error(\"Failed to run migrations\")\n        logger.newline()\n        logger.warn(\"Common issues:\")\n        logger.info(\"  ‚Ä¢ Check your database credentials in .env\")\n        logger.info(\"  ‚Ä¢ Make sure the database exists and is running\")\n        logger.info(\"  ‚Ä¢ Verify your user has the correct permissions\")\n        logger.info(\"  ‚Ä¢ For MySQL: GRANT ALL PRIVILEGES ON database_name.* TO 'user'@'localhost';\")\n        logger.newline()\n\n        if (error.message || error.stderr) {\n          console.error(error)\n        }\n        process.exit(1)\n      }\n    })\n\n  // db:push - Push schema to database (without regenerating)\n  db.command(\"push\")\n    .description(\"Push Prisma schema to database (no migration files)\")\n    .option(\"--regenerate\", \"Regenerate schema from template before pushing\")\n    .action(async (options?: { regenerate?: boolean }) => {\n      try {\n        // Step 1: Optionally regenerate schema from template\n        if (options?.regenerate) {\n          const spinner1 = logger.spinner(\"Generating Prisma schema from template...\")\n          spinner1.start()\n          await generatePrismaSchema()\n          spinner1.succeed(\"Prisma schema generated from template\")\n        }\n\n        // Step 2: Push to database\n        const spinner2 = logger.spinner(\"Pushing schema to database...\")\n        spinner2.start()\n        execSync(\"npx prisma db push\", { stdio: \"inherit\" })\n        spinner2.succeed(\"Schema pushed to database\")\n\n        logger.newline()\n        logger.success(\"Database push complete!\")\n      } catch (error: any) {\n        logger.newline()\n        logger.error(\"Failed to push schema\")\n        logger.newline()\n        logger.warn(\"Common issues:\")\n        logger.info(\"  ‚Ä¢ Check your database credentials in .env\")\n        logger.info(\"  ‚Ä¢ Make sure the database exists and is running\")\n        logger.info(\"  ‚Ä¢ Verify your user has the correct permissions\")\n        logger.newline()\n\n        if (error.message || error.stderr) {\n          console.error(error)\n        }\n        process.exit(1)\n      }\n    })\n\n  // db:pull - Pull schema from database\n  db.command(\"pull\")\n    .description(\"Introspect database and update Prisma schema\")\n    .option(\"--force\", \"Overwrite existing schema\")\n    .action(async (options: { force?: boolean }) => {\n      try {\n        const spinner = logger.spinner(\"Introspecting database...\")\n        spinner.start()\n\n        const pullCmd = options.force\n          ? \"npx prisma db pull --force\"\n          : \"npx prisma db pull\"\n        execSync(pullCmd, { stdio: \"inherit\" })\n\n        spinner.succeed(\"Database introspected successfully!\")\n        logger.info(\"Run 'shadpanel db:generate' to generate Prisma Client\")\n      } catch (error) {\n        logger.error(\"Failed to pull schema\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:studio - Open Prisma Studio\n  db.command(\"studio\")\n    .description(\"Open Prisma Studio to browse and edit data\")\n    .option(\"-p, --port <port>\", \"Port to run Prisma Studio on\", \"5555\")\n    .option(\"-b, --browser <browser>\", \"Browser to open Prisma Studio in\")\n    .action((options: { port?: string; browser?: string }) => {\n      try {\n        logger.info(`Opening Prisma Studio on port ${options.port || 5555}...`)\n        logger.info(\"Press Ctrl+C to stop\")\n        logger.newline()\n\n        let studioCmd = `npx prisma studio --port ${options.port || 5555}`\n        if (options.browser) {\n          studioCmd += ` --browser ${options.browser}`\n        }\n\n        execSync(studioCmd, { stdio: \"inherit\" })\n      } catch (error) {\n        // User pressed Ctrl+C, exit gracefully\n        logger.newline()\n        logger.info(\"Prisma Studio stopped\")\n        process.exit(0)\n      }\n    })\n\n  // db:seed - Seed the database\n  db.command(\"seed\")\n    .description(\"Seed the database with initial data\")\n    .action(() => {\n      try {\n        const spinner = logger.spinner(\"Seeding database...\")\n        spinner.start()\n        execSync(\"npx prisma db seed\", { stdio: \"inherit\" })\n        spinner.succeed(\"Database seeded successfully!\")\n      } catch (error) {\n        logger.error(\"Failed to seed database\")\n        logger.info(\"Make sure you have a 'prisma.seed' script in package.json\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:reset - Reset the database\n  db.command(\"reset\")\n    .description(\"Reset the database (WARNING: deletes all data)\")\n    .option(\"--force\", \"Skip confirmation prompt\")\n    .action((options: { force?: boolean }) => {\n      try {\n        const resetCmd = options.force\n          ? \"npx prisma migrate reset --force\"\n          : \"npx prisma migrate reset\"\n\n        logger.warn(\"This will delete all data in your database!\")\n        execSync(resetCmd, { stdio: \"inherit\" })\n        logger.success(\"Database reset complete!\")\n      } catch (error) {\n        logger.error(\"Failed to reset database\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  return db\n}\n","import fs from \"fs-extra\"\nimport path from \"path\"\n\n// Load environment variables from .env file if it exists\nfunction loadEnv() {\n  try {\n    const envPath = path.join(process.cwd(), '.env')\n    if (fs.existsSync(envPath)) {\n      const envContent = fs.readFileSync(envPath, 'utf-8')\n      envContent.split('\\n').forEach(line => {\n        const match = line.match(/^([^=:#]+)=(.*)/)\n        if (match) {\n          const key = match[1].trim()\n          const value = match[2].trim().replace(/^[\"']|[\"']$/g, '')\n          if (!process.env[key]) {\n            process.env[key] = value\n          }\n        }\n      })\n    }\n  } catch (error) {\n    // Silently fail if .env doesn't exist or can't be read\n  }\n}\n\n// Load environment on import\nloadEnv()\n\ntype DatabaseDriver = 'mysql' | 'postgresql' | 'sqlite' | 'mongodb'\n\ninterface DatabaseCredentials {\n  host?: string\n  port?: string\n  database?: string\n  username?: string\n  password?: string\n  schema?: string\n}\n\n/**\n * Get database driver from environment\n * Defaults to 'mysql' if DATABASE_DRIVER is not set\n */\nexport function getDriver(): DatabaseDriver {\n  const driver = process.env.DATABASE_DRIVER as DatabaseDriver\n  return driver || 'mysql'\n}\n\n/**\n * Get database URL from environment\n * Priority:\n * 1. Use DATABASE_URL if it exists\n * 2. Construct URL from individual DATABASE_* credentials\n * 3. Fall back to default SQLite for development\n */\nexport function getUrl(): string {\n  // Priority 1: Use DATABASE_URL directly if provided\n  if (process.env.DATABASE_URL) {\n    return process.env.DATABASE_URL\n  }\n\n  // Priority 2: Construct from individual credentials\n  const credentials: DatabaseCredentials = {\n    host: process.env.DATABASE_HOST,\n    port: process.env.DATABASE_PORT,\n    database: process.env.DATABASE_NAME,\n    username: process.env.DATABASE_USERNAME,\n    password: process.env.DATABASE_PASSWORD,\n    schema: process.env.DATABASE_SCHEMA,\n  }\n\n  const constructedUrl = constructDatabaseUrl(getDriver(), credentials)\n  if (constructedUrl) {\n    return constructedUrl\n  }\n\n  // Priority 3: Fall back to SQLite for development\n  console.warn('No DATABASE_URL or credentials found. Using SQLite fallback.')\n  return 'file:./dev.db'\n}\n\n/**\n * Construct database URL from credentials based on driver type\n */\nfunction constructDatabaseUrl(\n  driver: DatabaseDriver,\n  credentials: DatabaseCredentials\n): string | null {\n  const { host, database } = credentials\n\n  // Check if we have enough credentials to construct a URL\n  if (!host || !database) {\n    return null\n  }\n\n  switch (driver) {\n    case 'mysql':\n      return buildMySQLUrl(credentials)\n\n    case 'postgresql':\n      return buildPostgreSQLUrl(credentials)\n\n    case 'mongodb':\n      return buildMongoDBUrl(credentials)\n\n    case 'sqlite':\n      // SQLite doesn't use host/port, just database path\n      return `file:${database}`\n\n    default:\n      console.warn(`Unsupported driver: ${driver}`)\n      return null\n  }\n}\n\n/**\n * Build MySQL connection URL\n */\nfunction buildMySQLUrl(credentials: DatabaseCredentials): string {\n  const { host, port = '3306', database, username, password, schema } = credentials\n\n  const auth = username && password ? `${username}:${password}@` : ''\n  const schemaParam = schema ? `?schema=${schema}` : ''\n\n  return `mysql://${auth}${host}:${port}/${database}${schemaParam}`\n}\n\n/**\n * Build PostgreSQL connection URL\n */\nfunction buildPostgreSQLUrl(credentials: DatabaseCredentials): string {\n  const { host, port = '5432', database, username, password, schema } = credentials\n\n  const auth = username && password ? `${username}:${password}@` : ''\n  const schemaParam = schema ? `?schema=${schema}` : ''\n\n  return `postgresql://${auth}${host}:${port}/${database}${schemaParam}`\n}\n\n/**\n * Build MongoDB connection URL\n */\nfunction buildMongoDBUrl(credentials: DatabaseCredentials): string {\n  const { host, port = '27017', database, username, password } = credentials\n\n  const auth = username && password ? `${username}:${password}@` : ''\n  const authSource = username ? '?authSource=admin' : ''\n\n  return `mongodb://${auth}${host}:${port}/${database}${authSource}`\n}\n\n/**\n * Generate Prisma schema from template\n */\nexport async function generatePrismaSchema(projectDir?: string): Promise<void> {\n  const baseDir = projectDir || process.cwd()\n  const templatePath = path.join(baseDir, 'prisma', 'schema.prisma.template')\n  const outputPath = path.join(baseDir, 'prisma', 'schema.prisma')\n\n  // Get database configuration\n  const driver = getDriver()\n  const url = getUrl()\n\n  console.log(`üìä Database Driver: ${driver}`)\n  console.log(`üîó Database URL: ${url.substring(0, 20)}...`)\n\n  // Check if template exists\n  if (!(await fs.pathExists(templatePath))) {\n    console.warn(`‚ö†Ô∏è  Template file not found: ${templatePath}`)\n    console.log('Creating default template...')\n\n    // Create a basic template\n    const defaultTemplate = `datasource db {\n  provider = \"{{DATABASE_DRIVER}}\"\n  url      = \"{{DATABASE_URL}}\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// Add your models here\n`\n    await fs.ensureDir(path.dirname(templatePath))\n    await fs.writeFile(templatePath, defaultTemplate)\n  }\n\n  // Read the template\n  let schemaContent = await fs.readFile(templatePath, 'utf-8')\n\n  // Replace placeholders\n  schemaContent = schemaContent\n    .replace(/\\{\\{DATABASE_DRIVER\\}\\}/g, driver)\n    .replace(/\\{\\{DATABASE_URL\\}\\}/g, url)\n\n  // Write the generated schema\n  await fs.ensureDir(path.dirname(outputPath))\n  await fs.writeFile(outputPath, schemaContent)\n\n  console.log(`‚úÖ Generated: ${outputPath}`)\n}\n","import prompts from \"prompts\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\n\nexport type DatabaseDriver = \"mysql\" | \"postgresql\" | \"sqlite\" | \"mongodb\"\nexport type PackageManager = \"npm\" | \"pnpm\" | \"yarn\" | \"bun\"\n\nexport interface DatabaseInitAnswers {\n  driver: DatabaseDriver\n  packageManager: PackageManager\n  installPrisma: boolean\n}\n\nexport async function promptDatabaseInit(prismaAlreadyInstalled: boolean = false): Promise<DatabaseInitAnswers | null> {\n  console.log(\"\\nüóÑÔ∏è  Database Configuration\\n\")\n\n  if (prismaAlreadyInstalled) {\n    console.log(\"‚úì Prisma is already installed in this project\\n\")\n  }\n\n  const questions: prompts.PromptObject[] = [\n    {\n      type: \"select\",\n      name: \"driver\",\n      message: \"Which database are you using?\",\n      choices: [\n        { title: \"MySQL\", value: \"mysql\", description: \"MySQL database\" },\n        { title: \"PostgreSQL\", value: \"postgresql\", description: \"PostgreSQL database\" },\n        { title: \"SQLite\", value: \"sqlite\", description: \"SQLite (local file database)\" },\n        { title: \"MongoDB\", value: \"mongodb\", description: \"MongoDB database\" },\n      ],\n      initial: 0,\n    },\n    {\n      type: prismaAlreadyInstalled ? null : \"select\",\n      name: \"packageManager\",\n      message: \"Which package manager do you want to use?\",\n      choices: [\n        { title: \"npm\", value: \"npm\" },\n        { title: \"pnpm\", value: \"pnpm\" },\n        { title: \"yarn\", value: \"yarn\" },\n        { title: \"bun\", value: \"bun\" },\n      ],\n      initial: 0,\n    },\n    {\n      type: prismaAlreadyInstalled ? null : \"confirm\",\n      name: \"installPrisma\",\n      message: \"Install Prisma packages now?\",\n      initial: true,\n    },\n  ]\n\n  try {\n    const answers = await prompts(questions, {\n      onCancel: () => {\n        throw new Error(\"User cancelled the operation\")\n      },\n    })\n\n    // If Prisma is already installed, set default values for skipped questions\n    if (prismaAlreadyInstalled) {\n      answers.installPrisma = false\n      answers.packageManager = \"npm\" // Default, won't be used anyway\n    }\n\n    return answers as DatabaseInitAnswers\n  } catch (error) {\n    return null\n  }\n}\n\nexport async function createEnvFile(\n  projectDir: string,\n  driver: DatabaseDriver\n): Promise<void> {\n  const envPath = path.join(projectDir, \".env\")\n  const envExamplePath = path.join(projectDir, \".env.example\")\n\n  // Create template based on driver\n  const templates = {\n    mysql: `# MySQL Database Configuration\nDATABASE_DRIVER=mysql\nDATABASE_URL=\"mysql://username:password@localhost:3306/database_name\"\n\n# OR use individual credentials (will auto-construct DATABASE_URL):\n# DATABASE_HOST=localhost\n# DATABASE_PORT=3306\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=root\n# DATABASE_PASSWORD=password\n`,\n    postgresql: `# PostgreSQL Database Configuration\nDATABASE_DRIVER=postgresql\nDATABASE_URL=\"postgresql://username:password@localhost:5432/database_name?schema=public\"\n\n# OR use individual credentials (will auto-construct DATABASE_URL):\n# DATABASE_HOST=localhost\n# DATABASE_PORT=5432\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=postgres\n# DATABASE_PASSWORD=password\n# DATABASE_SCHEMA=public\n`,\n    sqlite: `# SQLite Database Configuration\nDATABASE_DRIVER=sqlite\nDATABASE_URL=\"file:./dev.db\"\n`,\n    mongodb: `# MongoDB Database Configuration\nDATABASE_DRIVER=mongodb\nDATABASE_URL=\"mongodb://username:password@localhost:27017/database_name?authSource=admin\"\n\n# OR use individual credentials (will auto-construct DATABASE_URL):\n# DATABASE_HOST=localhost\n# DATABASE_PORT=27017\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=admin\n# DATABASE_PASSWORD=password\n`,\n  }\n\n  const envContent = templates[driver]\n\n  // Check if .env already exists\n  if (await fs.pathExists(envPath)) {\n    // Append to existing .env if DATABASE_DRIVER not already present\n    const existing = await fs.readFile(envPath, \"utf-8\")\n    if (!existing.includes(\"DATABASE_DRIVER\")) {\n      await fs.appendFile(envPath, \"\\n\" + envContent)\n    }\n  } else {\n    // Create new .env\n    await fs.writeFile(envPath, envContent)\n  }\n\n  // Create .env.example with template for all drivers\n  const exampleContent = `# Database Configuration\n# Choose your database driver and configure accordingly\n\n# ===== MySQL =====\n# DATABASE_DRIVER=mysql\n# DATABASE_URL=\"mysql://username:password@localhost:3306/database_name\"\n\n# ===== PostgreSQL =====\n# DATABASE_DRIVER=postgresql\n# DATABASE_URL=\"postgresql://username:password@localhost:5432/database_name?schema=public\"\n\n# ===== SQLite =====\n# DATABASE_DRIVER=sqlite\n# DATABASE_URL=\"file:./dev.db\"\n\n# ===== MongoDB =====\n# DATABASE_DRIVER=mongodb\n# DATABASE_URL=\"mongodb://username:password@localhost:27017/database_name?authSource=admin\"\n\n# ===== Alternative: Individual Credentials =====\n# The system will auto-construct DATABASE_URL from these:\n# DATABASE_HOST=localhost\n# DATABASE_PORT=3306\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=root\n# DATABASE_PASSWORD=password\n# DATABASE_SCHEMA=public\n`\n\n  if (await fs.pathExists(envExamplePath)) {\n    const existing = await fs.readFile(envExamplePath, \"utf-8\")\n    if (!existing.includes(\"DATABASE_DRIVER\")) {\n      await fs.appendFile(envExamplePath, \"\\n\" + exampleContent)\n    }\n  } else {\n    await fs.writeFile(envExamplePath, exampleContent)\n  }\n}\n","{\n  \"name\": \"shadpanel\",\n  \"version\": \"0.1.0\",\n  \"description\": \"ShadPanel CLI - Build admin panels with Next.js and shadcn/ui\",\n  \"main\": \"index.cjs\",\n  \"type\": \"module\",\n  \"bin\": {\n    \"shadpanel\": \"./dist/cli.mjs\",\n    \"create-shadpanel-next\": \"./cli.cjs\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build:cli\": \"tsup cli/index.ts --format esm --dts --clean && mv dist/index.js dist/cli.mjs\",\n    \"dev:cli\": \"tsx cli/index.ts\",\n    \"prepublishOnly\": \"npm run build:cli\"\n  },\n  \"files\": [\n    \"dist\",\n    \"cli.cjs\",\n    \"index.cjs\",\n    \"README.md\"\n  ],\n  \"keywords\": [\n    \"panel\",\n    \"ui\",\n    \"component\",\n    \"shadcn\",\n    \"react\",\n    \"nextjs\",\n    \"cli\",\n    \"scaffold\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\"\n  },\n  \"homepage\": \"\",\n  \"dependencies\": {\n    \"chalk\": \"^5.6.2\",\n    \"commander\": \"^14.0.2\",\n    \"fs-extra\": \"^11.3.2\",\n    \"ora\": \"^9.0.0\",\n    \"prompts\": \"^2.4.2\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/prompts\": \"^2.4.9\",\n    \"tsup\": \"^8.5.0\",\n    \"tsx\": \"^4.20.6\",\n    \"typescript\": \"^5.9.3\"\n  }\n}\n"],"mappings":"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","names":["Command","execSync","path","fs","prompts","fs","path","path","fs","execSync","Command"]}