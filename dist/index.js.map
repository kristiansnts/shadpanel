{"version":3,"sources":["../cli/index.ts","../cli/commands/init.ts","../cli/utils/prompts.ts","../cli/utils/logger.ts","../cli/utils/files.ts","../cli/utils/dependencies.ts","../cli/utils/git.ts","../package.json","../cli/commands/prisma.ts","../cli/utils/db.ts","../cli/utils/db-prompts.ts"],"sourcesContent":["import { Command } from \"commander\"\nimport { initCommand } from \"./commands/init\"\nimport { prismaCommand } from \"./commands/prisma\"\nimport packageJson from \"../package.json\"\n\nconst program = new Command()\n\nprogram\n  .name(\"shadpanel\")\n  .description(\"ShadPanel CLI - Build admin panels with Next.js and shadcn/ui\")\n  .version(packageJson.version)\n\n// shadpanel init - Initialize new project\nprogram\n  .command(\"init\")\n  .description(\"Initialize a new ShadPanel project\")\n  .argument(\"[project-name]\", \"Project directory name\")\n  .option(\"--use-npm\", \"Explicitly use npm as package manager\")\n  .option(\"--use-pnpm\", \"Explicitly use pnpm as package manager\")\n  .option(\"--use-yarn\", \"Explicitly use yarn as package manager\")\n  .option(\"--use-bun\", \"Explicitly use bun as package manager\")\n  .option(\"--skip-install\", \"Skip installing packages\")\n  .option(\"--disable-git\", \"Explicitly skip initializing a git repository\")\n  .option(\"--yes\", \"Use defaults for all options without prompting\")\n  .option(\"-e, --example <name>\", \"Bootstrap with a specific example\")\n  .option(\"--full-panel\", \"Install full panel with authentication (default)\")\n  .option(\"--auth-components\", \"Install authentication + components only\")\n  .option(\"--components-only\", \"Install components only\")\n  .option(\"--no-auth\", \"Skip authentication setup\")\n  .option(\"--google\", \"Include Google OAuth provider\")\n  .option(\"--github\", \"Include GitHub OAuth provider\")\n  .option(\"--credentials\", \"Include email/password authentication (default)\")\n  .option(\"--no-demos\", \"Skip demo pages\")\n  .action(async (projectName?: string, options?: any) => {\n    await initCommand(projectName, options)\n  })\n\n// Register prisma/db commands (shadpanel db:init, etc.)\nprogram.addCommand(prismaCommand())\n\nprogram.parse()\n","import path from \"path\"\nimport { fileURLToPath } from \"url\"\nimport { randomBytes } from \"crypto\"\nimport fs from \"fs-extra\"\nimport { promptInitQuestions, promptAppName } from \"../utils/prompts\"\nimport { logger } from \"../utils/logger\"\nimport {\n  copyBaseTemplate,\n  copyAuthTemplate,\n  copyDemoTemplate,\n  copyConfigTemplate,\n  createEnvFile,\n  mergeMenuConfigs,\n  copyUIComponents,\n  copyLibUtils,\n  copyHooks,\n  type TemplateVariables,\n} from \"../utils/files\"\nimport {\n  isPackageManagerAvailable,\n  installDependencies,\n  updatePackageJson,\n  getDevCommand,\n  type PackageManager,\n} from \"../utils/dependencies\"\nimport { initGitRepository, isGitAvailable } from \"../utils/git\"\nimport packageJson from \"../../package.json\"\n\n// ES module equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\nexport interface CliOptions {\n  useNpm?: boolean\n  usePnpm?: boolean\n  useYarn?: boolean\n  useBun?: boolean\n  skipInstall?: boolean\n  disableGit?: boolean\n  yes?: boolean\n  example?: string\n  fullPanel?: boolean\n  authComponents?: boolean\n  componentsOnly?: boolean\n  noAuth?: boolean\n  google?: boolean\n  github?: boolean\n  credentials?: boolean\n  noDemos?: boolean\n}\n\nexport async function initCommand(projectName?: string, options: CliOptions = {}): Promise<void> {\n  logger.welcome()\n\n  // Prompt user for project configuration (or use CLI options)\n  const answers = await promptInitQuestions(projectName, options)\n\n  if (!answers) {\n    logger.error(\"Initialization cancelled\")\n    process.exit(1)\n  }\n\n  // Validate package manager\n  if (!isPackageManagerAvailable(answers.packageManager)) {\n    logger.error(\n      `Package manager \"${answers.packageManager}\" is not available on your system`\n    )\n    process.exit(1)\n  }\n\n  // Convert project name to application display name\n  // e.g., \"my-admin-panel\" -> \"My Admin Panel\"\n  const appName = answers.projectName\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n\n  // Setup paths\n  // Handle current directory (.) for components-only and auth-components\n  const targetDir = answers.projectName === \".\"\n    ? process.cwd()\n    : path.resolve(process.cwd(), answers.projectName)\n  // When built, __dirname is dist/, so we go up one level to find templates/\n  const templatesDir = path.resolve(__dirname, \"../templates\")\n\n  // Check if templates directory exists\n  if (!(await fs.pathExists(templatesDir))) {\n    logger.error(\"Templates directory not found. This may be a package issue.\")\n    process.exit(1)\n  }\n\n  // Show appropriate message based on merge status\n  if (answers.mergeWithExisting) {\n    logger.info(`Merging ShadPanel into existing project: ${targetDir}`)\n    logger.info(\"Existing files will be preserved\")\n  } else {\n    logger.info(`Setting up your project in: ${targetDir}`)\n  }\n  logger.newline()\n\n  // Generate a secure random secret for NextAuth\n  const nextAuthSecret = randomBytes(32).toString('base64')\n\n  // Create template variables\n  const variables: TemplateVariables = {\n    APP_NAME: appName,\n    PROJECT_NAME: answers.projectName,\n    SHADPANEL_VERSION: packageJson.version,\n    NEXTAUTH_SECRET: nextAuthSecret,\n    GOOGLE: answers.authProviders.includes(\"google\"),\n    GITHUB: answers.authProviders.includes(\"github\"),\n    CREDENTIALS: answers.authProviders.includes(\"credentials\"),\n  }\n\n  try {\n    // Step 1: Create project directory\n    const spinner1 = logger.spinner(\"Creating project structure...\")\n    spinner1.start()\n    await fs.ensureDir(targetDir)\n    spinner1.succeed(\"Project structure created\")\n\n    // Step 2: Copy base template (only for full-panel and when not merging)\n    // When merging with existing project, skip base template to preserve existing Next.js structure\n    if (answers.installationType === \"full-panel\" && !answers.mergeWithExisting) {\n      const spinner2 = logger.spinner(\"Copying base template files...\")\n      spinner2.start()\n      await copyBaseTemplate(templatesDir, targetDir, variables)\n      spinner2.succeed(\"Base template files copied\")\n    } else if (answers.mergeWithExisting) {\n      logger.info(\"Skipping base template (preserving existing Next.js structure)\")\n    }\n\n    // Step 3: Copy config files (preserve existing if merging)\n    const spinner3 = logger.spinner(\"Setting up configuration...\")\n    spinner3.start()\n    await copyConfigTemplate(templatesDir, targetDir, variables, answers.mergeWithExisting)\n    spinner3.succeed(\"Configuration files created\")\n\n    // Step 4: Copy auth template if needed (preserve existing if merging)\n    if (answers.authentication) {\n      const spinner4 = logger.spinner(\"Adding authentication system...\")\n      spinner4.start()\n      await copyAuthTemplate(templatesDir, targetDir, variables, answers.mergeWithExisting)\n      spinner4.succeed(\"Authentication system added\")\n    }\n\n    // Step 5: Copy demo template if needed (only for full-panel, preserve existing if merging)\n    if (answers.installationType === \"full-panel\" && answers.demos) {\n      const spinner5 = logger.spinner(\"Adding demo pages...\")\n      spinner5.start()\n      await copyDemoTemplate(templatesDir, targetDir, variables, answers.mergeWithExisting)\n      await mergeMenuConfigs(targetDir, true)\n      spinner5.succeed(\"Demo pages added\")\n    }\n\n    // Step 5.5: Copy UI components, lib, and hooks from package\n    const packageDir = path.resolve(__dirname, \"..\")\n    const spinnerComponents = logger.spinner(\"Copying UI components...\")\n    spinnerComponents.start()\n    await copyUIComponents(packageDir, targetDir)\n    await copyLibUtils(packageDir, targetDir)\n    await copyHooks(packageDir, targetDir)\n    spinnerComponents.succeed(\"UI components copied\")\n\n    // Step 6: Create .env file\n    const spinner6 = logger.spinner(\"Creating environment file...\")\n    spinner6.start()\n    await createEnvFile(targetDir)\n    spinner6.succeed(\"Environment file created\")\n\n    // Step 7: Update package.json with conditional dependencies\n    const spinner7 = logger.spinner(\"Updating dependencies...\")\n    spinner7.start()\n    await updatePackageJson(targetDir, {\n      authentication: answers.authentication,\n    })\n    spinner7.succeed(\"Dependencies updated\")\n\n    // Step 8: Install dependencies (skip if --skip-install flag is used)\n    if (!answers.skipInstall) {\n      const spinner8 = logger.spinner(\n        `Installing dependencies with ${answers.packageManager}...`\n      )\n      spinner8.start()\n      await installDependencies(targetDir, answers.packageManager)\n      spinner8.succeed(\"Dependencies installed\")\n    } else {\n      logger.info(\"Skipping dependency installation (--skip-install flag)\")\n    }\n\n    // Step 9: Initialize git repository\n    if (answers.initGit && isGitAvailable()) {\n      const spinner9 = logger.spinner(\"Initializing git repository...\")\n      spinner9.start()\n      try {\n        await initGitRepository(targetDir)\n        spinner9.succeed(\"Git repository initialized\")\n      } catch (error) {\n        spinner9.warn(\"Failed to initialize git repository\")\n      }\n    }\n\n    // Success!\n    // For current directory installation, don't show \"cd .\" in completion message\n    const projectNameForMessage = answers.projectName === \".\"\n      ? path.basename(process.cwd())\n      : answers.projectName\n    logger.complete(\n      projectNameForMessage,\n      getDevCommand(answers.packageManager),\n      answers.installationType,\n      answers.projectName === \".\", // Flag to indicate current directory installation\n      answers.skipInstall, // Flag to indicate if install was skipped\n      answers.packageManager // Package manager for install command\n    )\n\n    // Additional info\n    if (answers.authentication) {\n      logger.info(\n        \"Don't forget to set up your authentication providers in .env\"\n      )\n    }\n  } catch (error) {\n    logger.error(\"Failed to initialize project\")\n    console.error(error)\n    process.exit(1)\n  }\n}\n","import prompts from \"prompts\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport type { CliOptions } from \"../commands/init\"\n\nexport type InstallationType = \"full-panel\" | \"auth-components\" | \"components-only\"\nexport type PackageManager = \"npm\" | \"pnpm\" | \"yarn\" | \"bun\"\n\nexport interface InitAnswers {\n  installationType: InstallationType\n  projectName: string\n  packageManager: PackageManager\n  authentication: boolean\n  authProviders: string[]\n  demos: boolean\n  demoTypes: string[]\n  initGit: boolean\n  skipInstall: boolean\n  mergeWithExisting: boolean\n}\n\n// Detect available package managers\nfunction detectPackageManager(): PackageManager {\n  const userAgent = process.env.npm_config_user_agent || \"\"\n\n  if (userAgent.includes(\"pnpm\")) return \"pnpm\"\n  if (userAgent.includes(\"yarn\")) return \"yarn\"\n  if (userAgent.includes(\"bun\")) return \"bun\"\n  return \"npm\"\n}\n\nexport async function promptInitQuestions(\n  initialProjectName?: string,\n  cliOptions: CliOptions = {}\n): Promise<InitAnswers | null> {\n  const defaultProjectName = initialProjectName || \"my-admin-panel\"\n\n  // Determine package manager from CLI options or detect\n  let packageManager: PackageManager = detectPackageManager()\n  if (cliOptions.useNpm) packageManager = \"npm\"\n  if (cliOptions.usePnpm) packageManager = \"pnpm\"\n  if (cliOptions.useYarn) packageManager = \"yarn\"\n  if (cliOptions.useBun) packageManager = \"bun\"\n\n  // Determine installation type from CLI options\n  let installationType: InstallationType = \"full-panel\"\n  if (cliOptions.componentsOnly) installationType = \"components-only\"\n  if (cliOptions.authComponents) installationType = \"auth-components\"\n  if (cliOptions.fullPanel) installationType = \"full-panel\"\n\n  // Determine authentication providers\n  const authProviders: string[] = []\n  if (cliOptions.credentials !== false) authProviders.push(\"credentials\") // Default\n  if (cliOptions.google) authProviders.push(\"google\")\n  if (cliOptions.github) authProviders.push(\"github\")\n\n  // If --yes flag is used, skip all prompts and use defaults/CLI options\n  if (cliOptions.yes) {\n    // Check if directory exists before returning\n    const projectDir = path.resolve(process.cwd(), defaultProjectName)\n    const directoryExists = fs.existsSync(projectDir)\n\n    return {\n      projectName: defaultProjectName,\n      installationType,\n      packageManager,\n      authentication: cliOptions.noAuth ? false : (installationType !== \"components-only\"),\n      authProviders: authProviders.length > 0 ? authProviders : [\"credentials\"],\n      demos: cliOptions.noDemos ? false : (installationType === \"full-panel\"),\n      demoTypes: cliOptions.noDemos ? [] : [\"form\", \"table\", \"notification\"],\n      initGit: cliOptions.disableGit ? false : true,\n      skipInstall: cliOptions.skipInstall || false,\n      mergeWithExisting: directoryExists, // Auto-merge if --yes flag and directory exists\n    }\n  }\n\n  // Check if project directory exists (for both CLI and prompt)\n  const projectDir = path.resolve(process.cwd(), initialProjectName || defaultProjectName)\n  const directoryExists = fs.existsSync(projectDir)\n\n  // Build questions array, skipping those provided via CLI\n  const questions = [\n    // Project name (skip if provided as argument)\n    initialProjectName ? null : {\n      type: \"text\" as const,\n      name: \"projectName\",\n      message: \"What is your project name?\",\n      initial: defaultProjectName,\n      validate: (value: string) => {\n        if (!value) return \"Project name is required\"\n        if (value.includes(\" \")) return \"Project name cannot contain spaces\"\n        return true\n      },\n    },\n    // Ask if user wants to merge with existing directory\n    (directoryExists && !cliOptions.yes) ? {\n      type: \"confirm\" as const,\n      name: \"mergeWithExisting\",\n      message: `Directory \"${initialProjectName || defaultProjectName}\" already exists. Do you want to merge ShadPanel into this existing project?`,\n      initial: true,\n    } : null,\n    // Installation type (skip if provided via CLI)\n    (cliOptions.fullPanel || cliOptions.authComponents || cliOptions.componentsOnly) ? null : {\n      type: \"select\" as const,\n      name: \"installationType\",\n      message: \"What do you want to install?\",\n      choices: [\n        {\n          title: \"Full Panel with Auth\",\n          value: \"full-panel\",\n          description: \"Complete admin panel with authentication, sidebar, and demo pages\"\n        },\n        {\n          title: \"Auth + Components\",\n          value: \"auth-components\",\n          description: \"Authentication system + UI components without full panel structure\"\n        },\n        {\n          title: \"Components Only\",\n          value: \"components-only\",\n          description: \"Just the UI components (Form Builder, Data Table, etc.)\"\n        },\n      ],\n      initial: 0,\n    },\n    // Package manager (skip if provided via CLI)\n    (cliOptions.useNpm || cliOptions.usePnpm || cliOptions.useYarn || cliOptions.useBun) ? null : {\n      type: \"select\" as const,\n      name: \"packageManager\",\n      message: \"Which package manager do you want to use?\",\n      choices: [\n        { title: \"pnpm\", value: \"pnpm\" },\n        { title: \"npm\", value: \"npm\" },\n        { title: \"yarn\", value: \"yarn\" },\n        { title: \"bun\", value: \"bun\" },\n      ],\n      initial: packageManager === \"pnpm\" ? 0 : packageManager === \"npm\" ? 1 : packageManager === \"yarn\" ? 2 : 3,\n    },\n    // Authentication (skip if noAuth flag or if installation type determines it)\n    (cliOptions.noAuth || installationType === \"full-panel\" || installationType === \"auth-components\") ? null : {\n      type: (prev: any, answers: any) => {\n        const instType = answers.installationType || installationType\n        return instType === \"full-panel\" ? null : \"confirm\"\n      },\n      name: \"authentication\",\n      message: \"Do you want to include authentication (NextAuth.js)?\",\n      initial: (prev: any, answers: any) => (answers.installationType || installationType) === \"auth-components\",\n    },\n    // Auth providers (skip if specified via CLI flags)\n    (cliOptions.google || cliOptions.github || cliOptions.credentials !== undefined) ? null : {\n      type: (prev: any, answers: any) => {\n        const instType = answers.installationType || installationType\n        const hasAuth = answers.authentication !== undefined ? answers.authentication :\n                       (instType === \"full-panel\" || instType === \"auth-components\")\n        return hasAuth ? \"multiselect\" : null\n      },\n      name: \"authProviders\",\n      message: \"Which authentication providers do you want?\",\n      choices: [\n        { title: \"Email/Password (Credentials)\", value: \"credentials\", selected: true },\n        { title: \"Google OAuth\", value: \"google\" },\n        { title: \"GitHub OAuth\", value: \"github\" },\n      ],\n      hint: \"Space to select. Return to submit\",\n      instructions: false,\n    },\n    // Demos (skip if noDemos flag)\n    cliOptions.noDemos ? null : {\n      type: (prev: any, answers: any) => {\n        const instType = answers.installationType || installationType\n        return instType === \"full-panel\" ? \"confirm\" : null\n      },\n      name: \"demos\",\n      message: \"Do you want to include demo pages? (recommended for learning)\",\n      initial: true,\n    },\n    {\n      type: (prev: boolean, answers: any) => {\n        const instType = answers.installationType || installationType\n        return prev && instType === \"full-panel\" ? \"multiselect\" : null\n      },\n      name: \"demoTypes\",\n      message: \"Which demos do you want to include?\",\n      choices: [\n        { title: \"Form Builder Demo\", value: \"form\", selected: true },\n        { title: \"Data Table Demo\", value: \"table\", selected: true },\n        { title: \"Notification Demo\", value: \"notification\", selected: true },\n      ],\n      hint: \"Space to select. Return to submit\",\n      instructions: false,\n    },\n    // Git (skip if disableGit flag)\n    cliOptions.disableGit ? null : {\n      type: \"confirm\" as const,\n      name: \"initGit\",\n      message: \"Initialize a git repository?\",\n      initial: true,\n    },\n  ].filter(Boolean) // Remove null entries\n\n  try {\n    const promptAnswers = await prompts(questions as any, {\n      onCancel: () => {\n        throw new Error(\"User cancelled the operation\")\n      },\n    })\n\n    // If directory exists and user declined to merge, cancel operation\n    if (directoryExists && promptAnswers.mergeWithExisting === false) {\n      console.log(\"\\nOperation cancelled. Please choose a different project name or remove the existing directory.\")\n      return null\n    }\n\n    // Merge CLI options with prompt answers\n    const answers: InitAnswers = {\n      projectName: initialProjectName || promptAnswers.projectName || defaultProjectName,\n      installationType: promptAnswers.installationType || installationType,\n      packageManager: promptAnswers.packageManager || packageManager,\n      authentication: false,\n      authProviders: promptAnswers.authProviders || authProviders,\n      demos: promptAnswers.demos !== undefined ? promptAnswers.demos : (cliOptions.noDemos ? false : installationType === \"full-panel\"),\n      demoTypes: promptAnswers.demoTypes || (cliOptions.noDemos ? [] : [\"form\", \"table\", \"notification\"]),\n      initGit: promptAnswers.initGit !== undefined ? promptAnswers.initGit : !cliOptions.disableGit,\n      skipInstall: cliOptions.skipInstall || false,\n      mergeWithExisting: promptAnswers.mergeWithExisting !== undefined ? promptAnswers.mergeWithExisting : false,\n    }\n\n    // Set authentication based on installation type or noAuth flag\n    if (cliOptions.noAuth) {\n      answers.authentication = false\n    } else if (answers.installationType === \"full-panel\" || answers.installationType === \"auth-components\") {\n      answers.authentication = true\n    } else {\n      answers.authentication = promptAnswers.authentication || false\n    }\n\n    // Ensure auth providers has at least credentials if authentication is enabled\n    if (answers.authentication && answers.authProviders.length === 0) {\n      answers.authProviders = [\"credentials\"]\n    }\n\n    return answers\n  } catch (error) {\n    return null\n  }\n}\n\nexport async function promptAppName(): Promise<string> {\n  const answer = await prompts({\n    type: \"text\",\n    name: \"appName\",\n    message: \"What is your application name?\",\n    initial: \"My Admin Panel\",\n  })\n\n  return answer.appName || \"My Admin Panel\"\n}\n","import chalk from \"chalk\"\nimport ora, { Ora } from \"ora\"\n\nexport const logger = {\n  // Info messages\n  info: (message: string) => {\n    console.log(chalk.blue(\"ℹ\"), message)\n  },\n\n  // Success messages\n  success: (message: string) => {\n    console.log(chalk.green(\"✔\"), message)\n  },\n\n  // Warning messages\n  warn: (message: string) => {\n    console.log(chalk.yellow(\"⚠\"), message)\n  },\n\n  // Error messages\n  error: (message: string) => {\n    console.log(chalk.red(\"✖\"), message)\n  },\n\n  // Create a spinner\n  spinner: (text: string): Ora => {\n    return ora({\n      text,\n      spinner: \"dots\",\n    })\n  },\n\n  // Print welcome banner\n  welcome: () => {\n    console.log()\n    console.log(\n      chalk.bold.cyan(\"┌─────────────────────────────────────────────────┐\")\n    )\n    console.log(\n      chalk.bold.cyan(\"│                                                 │\")\n    )\n    console.log(\n      chalk.bold.cyan(\"│   Welcome to ShadPanel CLI                      │\")\n    )\n    console.log(\n      chalk.bold.cyan(\"│   Admin Panels Built on shadcn/ui               │\")\n    )\n    console.log(\n      chalk.bold.cyan(\"│                                                 │\")\n    )\n    console.log(\n      chalk.bold.cyan(\"└─────────────────────────────────────────────────┘\")\n    )\n    console.log()\n  },\n\n  // Print completion message\n  complete: (\n    projectName: string,\n    devCommand: string,\n    installationType?: string,\n    isCurrentDir?: boolean,\n    skipInstall?: boolean,\n    packageManager?: string\n  ) => {\n    console.log()\n\n    // Different message based on installation type\n    if (installationType === \"full-panel\") {\n      console.log(chalk.green.bold(\"✨ Done! Your ShadPanel admin panel is ready.\"))\n    } else if (installationType === \"auth-components\") {\n      console.log(chalk.green.bold(\"✨ Done! Authentication and components are installed.\"))\n    } else if (installationType === \"components-only\") {\n      console.log(chalk.green.bold(\"✨ Done! ShadPanel components are installed.\"))\n    } else {\n      console.log(chalk.green.bold(\"✨ Done! Your ShadPanel project is ready.\"))\n    }\n\n    console.log()\n    console.log(chalk.bold(\"🚀 Get started:\"))\n\n    // Only show \"cd\" if not current directory\n    if (!isCurrentDir) {\n      console.log(chalk.cyan(`  cd ${projectName}`))\n    }\n\n    // Show install command if dependencies were skipped\n    if (skipInstall && packageManager) {\n      const installCmd = packageManager === \"npm\" ? \"npm install\"\n        : packageManager === \"yarn\" ? \"yarn install\"\n        : packageManager === \"bun\" ? \"bun install\"\n        : `${packageManager} install`\n      console.log(chalk.cyan(`  ${installCmd}`))\n    }\n\n    console.log(chalk.cyan(`  ${devCommand}`))\n\n    if (installationType === \"full-panel\") {\n      console.log()\n      console.log(chalk.yellow(\"⚠️  Don't forget:\"))\n      console.log(chalk.cyan(`  • Open .env and configure your authentication providers`))\n    }\n\n    console.log()\n    console.log(chalk.bold(\"📚 Documentation:\"), chalk.cyan(\"https://github.com/kristiansnts/shadpanel\"))\n    console.log()\n  },\n\n  // Print a blank line\n  newline: () => {\n    console.log()\n  },\n}\n","import fs from \"fs-extra\"\nimport path from \"path\"\n\nexport interface TemplateVariables {\n  APP_NAME: string\n  PROJECT_NAME: string\n  SHADPANEL_VERSION: string\n  NEXTAUTH_SECRET: string\n  GOOGLE: boolean\n  GITHUB: boolean\n  CREDENTIALS: boolean\n}\n\n/**\n * Copy template files to the target directory\n */\nexport async function copyTemplateFiles(\n  templateDir: string,\n  targetDir: string,\n  variables: TemplateVariables,\n  preserveExisting = false\n): Promise<void> {\n  await fs.ensureDir(targetDir)\n\n  const files = await fs.readdir(templateDir, { withFileTypes: true })\n\n  for (const file of files) {\n    const sourcePath = path.join(templateDir, file.name)\n    const targetPath = path.join(targetDir, file.name)\n\n    if (file.isDirectory()) {\n      // Recursively copy directories\n      await copyTemplateFiles(sourcePath, targetPath, variables, preserveExisting)\n    } else if (file.isFile()) {\n      // Skip if file exists and we're preserving existing files\n      if (preserveExisting && await fs.pathExists(targetPath)) {\n        continue\n      }\n\n      // Read file content\n      let content = await fs.readFile(sourcePath, \"utf-8\")\n\n      // Process template variables\n      content = processTemplate(content, variables)\n\n      // Write to target\n      await fs.ensureDir(path.dirname(targetPath))\n      await fs.writeFile(targetPath, content, \"utf-8\")\n    }\n  }\n}\n\n/**\n * Process template placeholders and conditional blocks\n */\nexport function processTemplate(\n  content: string,\n  variables: TemplateVariables\n): string {\n  let processed = content\n\n  // Replace simple placeholders\n  processed = processed.replace(/\\{\\{APP_NAME\\}\\}/g, variables.APP_NAME)\n  processed = processed.replace(/\\{\\{PROJECT_NAME\\}\\}/g, variables.PROJECT_NAME)\n  processed = processed.replace(\n    /\\{\\{SHADPANEL_VERSION\\}\\}/g,\n    variables.SHADPANEL_VERSION\n  )\n  processed = processed.replace(\n    /\\{\\{NEXTAUTH_SECRET\\}\\}/g,\n    variables.NEXTAUTH_SECRET\n  )\n\n  // Process conditional blocks\n  processed = processConditional(processed, \"GOOGLE\", variables.GOOGLE)\n  processed = processConditional(processed, \"GITHUB\", variables.GITHUB)\n  processed = processConditional(processed, \"CREDENTIALS\", variables.CREDENTIALS)\n\n  return processed\n}\n\n/**\n * Process conditional blocks like {{#GOOGLE}}...{{/GOOGLE}}\n */\nfunction processConditional(\n  content: string,\n  key: string,\n  include: boolean\n): string {\n  const startTag = `{{#${key}}}`\n  const endTag = `{{/${key}}}`\n  const regex = new RegExp(\n    `${escapeRegex(startTag)}([\\\\s\\\\S]*?)${escapeRegex(endTag)}`,\n    \"g\"\n  )\n\n  if (include) {\n    // Keep the content, remove the tags\n    return content.replace(regex, \"$1\")\n  } else {\n    // Remove the entire block\n    return content.replace(regex, \"\")\n  }\n}\n\n/**\n * Escape special regex characters\n */\nfunction escapeRegex(str: string): string {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")\n}\n\n/**\n * Merge multiple template files into one target\n * Used for combining base + auth/demo configurations\n */\nexport async function mergeTemplates(\n  baseContent: string,\n  additionalContent: string,\n  mergeType: \"append\" | \"prepend\" | \"replace\" = \"append\"\n): Promise<string> {\n  switch (mergeType) {\n    case \"append\":\n      return baseContent + \"\\n\" + additionalContent\n    case \"prepend\":\n      return additionalContent + \"\\n\" + baseContent\n    case \"replace\":\n      return additionalContent\n    default:\n      return baseContent\n  }\n}\n\n/**\n * Copy base template files\n */\nexport async function copyBaseTemplate(\n  templatesDir: string,\n  targetDir: string,\n  variables: TemplateVariables,\n  preserveExisting = false\n): Promise<void> {\n  const baseDir = path.join(templatesDir, \"base\")\n  await copyTemplateFiles(baseDir, targetDir, variables, preserveExisting)\n}\n\n/**\n * Copy auth template files\n */\nexport async function copyAuthTemplate(\n  templatesDir: string,\n  targetDir: string,\n  variables: TemplateVariables,\n  preserveExisting = false\n): Promise<void> {\n  const authDir = path.join(templatesDir, \"auth\")\n  await copyTemplateFiles(authDir, targetDir, variables, preserveExisting)\n}\n\n/**\n * Copy demo template files\n */\nexport async function copyDemoTemplate(\n  templatesDir: string,\n  targetDir: string,\n  variables: TemplateVariables,\n  preserveExisting = false\n): Promise<void> {\n  const demoDir = path.join(templatesDir, \"demo\")\n  await copyTemplateFiles(demoDir, targetDir, variables, preserveExisting)\n}\n\n/**\n * Copy config template files\n */\nexport async function copyConfigTemplate(\n  templatesDir: string,\n  targetDir: string,\n  variables: TemplateVariables,\n  preserveExisting = false\n): Promise<void> {\n  const configDir = path.join(templatesDir, \"config\")\n\n  const files = await fs.readdir(configDir, { withFileTypes: true })\n\n  for (const file of files) {\n    const sourcePath = path.join(configDir, file.name)\n\n    // Handle special files\n    let targetFileName = file.name\n    let targetPath = path.join(targetDir, targetFileName)\n\n    // package.json.template -> package.json\n    if (file.name === \"package.json.template\") {\n      targetFileName = \"package.json\"\n      targetPath = path.join(targetDir, targetFileName)\n    }\n\n    // globals.css -> app/globals.css\n    if (file.name === \"globals.css\") {\n      targetPath = path.join(targetDir, \"app\", \"globals.css\")\n      await fs.ensureDir(path.join(targetDir, \"app\"))\n    }\n\n    if (file.isFile()) {\n      // Skip if file exists and we're preserving existing files\n      if (preserveExisting && await fs.pathExists(targetPath)) {\n        continue\n      }\n\n      let content = await fs.readFile(sourcePath, \"utf-8\")\n      content = processTemplate(content, variables)\n      await fs.writeFile(targetPath, content, \"utf-8\")\n    }\n  }\n}\n\n/**\n * Create .env file from .env.example\n */\nexport async function createEnvFile(targetDir: string): Promise<void> {\n  const examplePath = path.join(targetDir, \".env.example\")\n  const envPath = path.join(targetDir, \".env\")\n\n  if (await fs.pathExists(examplePath)) {\n    await fs.copy(examplePath, envPath)\n  }\n}\n\n/**\n * Merge menu configurations when demos are included\n */\nexport async function mergeMenuConfigs(\n  targetDir: string,\n  includeDemos: boolean\n): Promise<void> {\n  if (!includeDemos) return\n\n  const baseMenuPath = path.join(targetDir, \"config\", \"menu.ts\")\n  const demoMenuPath = path.join(targetDir, \"config\", \"menu-demo.ts\")\n\n  if (await fs.pathExists(demoMenuPath)) {\n    const demoContent = await fs.readFile(demoMenuPath, \"utf-8\")\n    await fs.writeFile(baseMenuPath, demoContent, \"utf-8\")\n    await fs.remove(demoMenuPath)\n  }\n}\n\n/**\n * Copy UI components from the package to the target project\n */\nexport async function copyUIComponents(\n  packageDir: string,\n  targetDir: string\n): Promise<void> {\n  const sourceComponentsDir = path.join(packageDir, \"components\")\n  const targetComponentsDir = path.join(targetDir, \"components\")\n\n  if (!(await fs.pathExists(sourceComponentsDir))) {\n    throw new Error(\"Components directory not found in package\")\n  }\n\n  // Copy all UI components\n  await fs.copy(sourceComponentsDir, targetComponentsDir, {\n    overwrite: false,\n    errorOnExist: false,\n  })\n}\n\n/**\n * Copy lib utilities from the package to the target project\n */\nexport async function copyLibUtils(\n  packageDir: string,\n  targetDir: string\n): Promise<void> {\n  const sourceLibDir = path.join(packageDir, \"lib\")\n  const targetLibDir = path.join(targetDir, \"lib\")\n\n  if (await fs.pathExists(sourceLibDir)) {\n    await fs.copy(sourceLibDir, targetLibDir, {\n      overwrite: false,\n      errorOnExist: false,\n    })\n  }\n}\n\n/**\n * Copy hooks from the package to the target project\n */\nexport async function copyHooks(\n  packageDir: string,\n  targetDir: string\n): Promise<void> {\n  const sourceHooksDir = path.join(packageDir, \"hooks\")\n  const targetHooksDir = path.join(targetDir, \"hooks\")\n\n  if (await fs.pathExists(sourceHooksDir)) {\n    await fs.copy(sourceHooksDir, targetHooksDir, {\n      overwrite: false,\n      errorOnExist: false,\n    })\n  }\n}\n","import { execSync } from \"child_process\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\n\nexport type PackageManager = \"npm\" | \"pnpm\" | \"yarn\" | \"bun\"\n\n/**\n * Detect which package manager the user has available\n */\nexport function detectPackageManager(): PackageManager {\n  try {\n    execSync(\"pnpm --version\", { stdio: \"ignore\" })\n    return \"pnpm\"\n  } catch {\n    // pnpm not available\n  }\n\n  try {\n    execSync(\"yarn --version\", { stdio: \"ignore\" })\n    return \"yarn\"\n  } catch {\n    // yarn not available\n  }\n\n  try {\n    execSync(\"bun --version\", { stdio: \"ignore\" })\n    return \"bun\"\n  } catch {\n    // bun not available\n  }\n\n  return \"npm\" // default fallback\n}\n\n/**\n * Check if a package manager is available\n */\nexport function isPackageManagerAvailable(pm: PackageManager): boolean {\n  try {\n    execSync(`${pm} --version`, { stdio: \"ignore\" })\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Install dependencies using the specified package manager\n */\nexport async function installDependencies(\n  projectDir: string,\n  packageManager: PackageManager,\n  localPackagePath?: string\n): Promise<void> {\n  // If local package path is provided, install from tarball\n  if (localPackagePath && await fs.pathExists(localPackagePath)) {\n    const installLocalCommand = getInstallLocalCommand(packageManager, localPackagePath)\n    execSync(installLocalCommand, {\n      cwd: projectDir,\n      stdio: \"inherit\",\n    })\n  } else {\n    const installCommand = getInstallCommand(packageManager)\n    execSync(installCommand, {\n      cwd: projectDir,\n      stdio: \"inherit\",\n    })\n  }\n}\n\n/**\n * Get the install command for a package manager\n */\nexport function getInstallCommand(packageManager: PackageManager): string {\n  switch (packageManager) {\n    case \"npm\":\n      return \"npm install\"\n    case \"pnpm\":\n      return \"pnpm install\"\n    case \"yarn\":\n      return \"yarn install\"\n    case \"bun\":\n      return \"bun install\"\n  }\n}\n\n/**\n * Get the install command for a local package\n */\nexport function getInstallLocalCommand(packageManager: PackageManager, packagePath: string): string {\n  switch (packageManager) {\n    case \"npm\":\n      return `npm install ${packagePath}`\n    case \"pnpm\":\n      return `pnpm add ${packagePath}`\n    case \"yarn\":\n      return `yarn add ${packagePath}`\n    case \"bun\":\n      return `bun add ${packagePath}`\n  }\n}\n\n/**\n * Get the dev command for a package manager\n */\nexport function getDevCommand(packageManager: PackageManager): string {\n  switch (packageManager) {\n    case \"npm\":\n      return \"npm run dev\"\n    case \"pnpm\":\n      return \"pnpm dev\"\n    case \"yarn\":\n      return \"yarn dev\"\n    case \"bun\":\n      return \"bun dev\"\n  }\n}\n\n/**\n * Update package.json with required dependencies\n */\nexport async function updatePackageJson(\n  projectDir: string,\n  options: {\n    authentication: boolean\n  }\n): Promise<void> {\n  const packageJsonPath = path.join(projectDir, \"package.json\")\n\n  if (!(await fs.pathExists(packageJsonPath))) {\n    throw new Error(\"package.json not found\")\n  }\n\n  const packageJson = await fs.readJson(packageJsonPath)\n\n  // Base dependencies are already in the template\n  // Only add conditional dependencies here\n\n  if (options.authentication) {\n    packageJson.dependencies[\"next-auth\"] = \"^4.24.11\"\n  }\n\n  await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 })\n}\n\n/**\n * Get lock file name for package manager\n */\nexport function getLockFileName(packageManager: PackageManager): string {\n  switch (packageManager) {\n    case \"npm\":\n      return \"package-lock.json\"\n    case \"pnpm\":\n      return \"pnpm-lock.yaml\"\n    case \"yarn\":\n      return \"yarn.lock\"\n    case \"bun\":\n      return \"bun.lockb\"\n  }\n}\n","import { execSync } from \"child_process\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\n\n/**\n * Check if git is available on the system\n */\nexport function isGitAvailable(): boolean {\n  try {\n    execSync(\"git --version\", { stdio: \"ignore\" })\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Initialize a git repository\n */\nexport async function initGitRepository(projectDir: string): Promise<void> {\n  if (!isGitAvailable()) {\n    throw new Error(\"Git is not available on this system\")\n  }\n\n  // Initialize git\n  execSync(\"git init\", {\n    cwd: projectDir,\n    stdio: \"ignore\",\n  })\n\n  // Add all files\n  execSync(\"git add .\", {\n    cwd: projectDir,\n    stdio: \"ignore\",\n  })\n\n  // Create initial commit\n  execSync('git commit -m \"Initial commit from ShadPanel CLI\"', {\n    cwd: projectDir,\n    stdio: \"ignore\",\n  })\n}\n\n/**\n * Check if the directory is already a git repository\n */\nexport async function isGitRepository(dir: string): Promise<boolean> {\n  const gitDir = path.join(dir, \".git\")\n  return await fs.pathExists(gitDir)\n}\n","{\n  \"name\": \"shadpanel\",\n  \"version\": \"1.1.1\",\n  \"description\": \"ShadPanel CLI - Build admin panels with Next.js and shadcn/ui\",\n  \"main\": \"index.cjs\",\n  \"type\": \"module\",\n  \"bin\": {\n    \"shadpanel\": \"./dist/cli.mjs\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build:cli\": \"tsup cli/index.ts --format esm --dts --clean && mv dist/index.js dist/cli.mjs\",\n    \"dev:cli\": \"tsx cli/index.ts\",\n    \"prepublishOnly\": \"npm run build:cli\"\n  },\n  \"files\": [\n    \"dist\",\n    \"templates\",\n    \"components\",\n    \"lib\",\n    \"hooks\",\n    \"contexts\",\n    \"README.md\"\n  ],\n  \"keywords\": [\n    \"panel\",\n    \"ui\",\n    \"component\",\n    \"shadcn\",\n    \"react\",\n    \"nextjs\",\n    \"cli\",\n    \"scaffold\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\"\n  },\n  \"homepage\": \"\",\n  \"dependencies\": {\n    \"chalk\": \"^5.6.2\",\n    \"commander\": \"^14.0.2\",\n    \"fs-extra\": \"^11.3.2\",\n    \"ora\": \"^9.0.0\",\n    \"prompts\": \"^2.4.2\"\n  },\n  \"devDependencies\": {\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/prompts\": \"^2.4.9\",\n    \"tsup\": \"^8.5.0\",\n    \"tsx\": \"^4.20.6\",\n    \"typescript\": \"^5.9.3\"\n  }\n}\n","import { Command } from \"commander\"\nimport { execSync } from \"child_process\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { logger } from \"../utils/logger\"\nimport { generatePrismaSchema } from \"../utils/db\"\nimport { promptDatabaseInit, createEnvFile } from \"../utils/db-prompts\"\n\n// Check if Prisma is already installed\nfunction isPrismaInstalled(projectDir: string): boolean {\n  try {\n    const packageJsonPath = path.join(projectDir, \"package.json\")\n    if (!fs.existsSync(packageJsonPath)) {\n      return false\n    }\n\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf-8\"))\n    const hasPrismaClient = packageJson.dependencies?.[\"@prisma/client\"]\n    const hasPrismaCli = packageJson.devDependencies?.[\"prisma\"]\n\n    return !!(hasPrismaClient || hasPrismaCli)\n  } catch (error) {\n    return false\n  }\n}\n\nexport function prismaCommand(): Command {\n  const db = new Command(\"db\")\n    .description(\"Database management commands (Prisma)\")\n\n  // db:init - Interactive database setup\n  db.command(\"init\")\n    .description(\"Initialize database configuration interactively\")\n    .action(async () => {\n      try {\n        logger.info(\"🗄️  Let's set up your database!\\n\")\n\n        const projectDir = process.cwd()\n\n        // Check if Prisma is already installed\n        const prismaAlreadyInstalled = isPrismaInstalled(projectDir)\n\n        // Step 1: Prompt for database configuration\n        const answers = await promptDatabaseInit(prismaAlreadyInstalled)\n\n        if (!answers) {\n          logger.error(\"Database initialization cancelled\")\n          process.exit(1)\n        }\n\n        // Step 2: Create .env file with template\n        const spinner1 = logger.spinner(\"Creating environment configuration...\")\n        spinner1.start()\n        await createEnvFile(projectDir, answers.driver)\n        spinner1.succeed(\"Environment configuration created (.env)\")\n\n        // Step 3: Create prisma directory and template\n        const spinner2 = logger.spinner(\"Setting up Prisma files...\")\n        spinner2.start()\n\n        const prismaDir = path.join(projectDir, \"prisma\")\n        await fs.ensureDir(prismaDir)\n\n        const templatePath = path.join(prismaDir, \"schema.prisma.template\")\n        const defaultTemplate = `datasource db {\n  provider = \"{{DATABASE_DRIVER}}\"\n  url      = \"{{DATABASE_URL}}\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// Add your models here\n// Example:\n// model User {\n//   id        Int      @id @default(autoincrement())\n//   email     String   @unique\n//   name      String?\n//   createdAt DateTime @default(now())\n//   updatedAt DateTime @updatedAt\n// }\n`\n        await fs.writeFile(templatePath, defaultTemplate)\n        spinner2.succeed(\"Prisma files created\")\n\n        // Step 4: Install Prisma packages if requested\n        if (answers.installPrisma) {\n          const spinner3 = logger.spinner(\n            `Installing Prisma with ${answers.packageManager}...`\n          )\n          spinner3.start()\n\n          try {\n            const pmCommands = {\n              npm: \"npm install @prisma/client && npm install -D prisma\",\n              pnpm: \"pnpm add @prisma/client && pnpm add -D prisma\",\n              yarn: \"yarn add @prisma/client && yarn add -D prisma\",\n              bun: \"bun add @prisma/client && bun add -D prisma\",\n            }\n\n            execSync(pmCommands[answers.packageManager], {\n              stdio: \"inherit\",\n              cwd: projectDir,\n            })\n            spinner3.succeed(\"Prisma packages installed\")\n          } catch (error) {\n            spinner3.fail(\"Failed to install Prisma packages\")\n            logger.warn(\n              `You can install manually with: ${answers.packageManager} install @prisma/client prisma`\n            )\n          }\n        }\n\n        // Success message\n        logger.newline()\n        logger.success(\"✅ Database setup complete!\")\n        logger.newline()\n        logger.info(\"📝 Next steps:\")\n        logger.info(\"   1. Edit your .env file with actual database credentials\")\n        logger.info(\"   2. Edit prisma/schema.prisma.template to add your models\")\n        logger.info(\"   3. Run 'shadpanel db generate-schema' to generate schema.prisma\")\n        logger.info(\"   4. Edit prisma/schema.prisma to add/modify models\")\n        logger.info(\"   5. Run 'shadpanel db migrate' to create migrations\")\n        logger.info(\"   6. Run 'shadpanel db generate' to generate Prisma Client\")\n        logger.info(\"   7. Run 'shadpanel db studio' to browse your database\")\n        logger.newline()\n        logger.warn(\"⚠️  Important:\")\n        logger.info(\"   • Edit schema.prisma for one-time changes\")\n        logger.info(\"   • Edit schema.prisma.template for reusable templates\")\n        logger.info(\"   • Use --regenerate flag to regenerate from template\")\n        logger.newline()\n        logger.info(`💡 Tip: Your .env has been configured for ${answers.driver.toUpperCase()}`)\n      } catch (error) {\n        logger.error(\"Failed to initialize database\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:generate-schema - Generate Prisma schema from template\n  db.command(\"generate-schema\")\n    .description(\"Generate prisma/schema.prisma from template using config\")\n    .action(async () => {\n      try {\n        const spinner = logger.spinner(\"Generating Prisma schema from template...\")\n        spinner.start()\n\n        await generatePrismaSchema()\n\n        spinner.succeed(\"Prisma schema generated successfully!\")\n      } catch (error) {\n        logger.error(\"Failed to generate schema\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:generate - Generate schema + Prisma Client\n  db.command(\"generate\")\n    .description(\"Generate Prisma schema and Prisma Client\")\n    .action(async () => {\n      try {\n        // Step 1: Generate schema\n        const spinner1 = logger.spinner(\"Generating Prisma schema from template...\")\n        spinner1.start()\n        await generatePrismaSchema()\n        spinner1.succeed(\"Prisma schema generated\")\n\n        // Step 2: Generate Prisma Client\n        const spinner2 = logger.spinner(\"Generating Prisma Client...\")\n        spinner2.start()\n        execSync(\"npx prisma generate\", { stdio: \"inherit\" })\n        spinner2.succeed(\"Prisma Client generated\")\n\n        logger.newline()\n        logger.success(\"Database setup complete!\")\n      } catch (error) {\n        logger.error(\"Failed to generate Prisma Client\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:migrate - Run migrations (without regenerating schema)\n  db.command(\"migrate\")\n    .description(\"Run database migrations\")\n    .argument(\"[name]\", \"Migration name\")\n    .option(\"--regenerate\", \"Regenerate schema from template before migrating\")\n    .action(async (name?: string, options?: { regenerate?: boolean }) => {\n      try {\n        // Step 1: Optionally regenerate schema from template\n        if (options?.regenerate) {\n          const spinner1 = logger.spinner(\"Generating Prisma schema from template...\")\n          spinner1.start()\n          await generatePrismaSchema()\n          spinner1.succeed(\"Prisma schema generated from template\")\n        }\n\n        // Step 2: Run migrations\n        const spinner2 = logger.spinner(\"Running database migrations...\")\n        spinner2.start()\n        const migrateCmd = name\n          ? `npx prisma migrate dev --name ${name}`\n          : \"npx prisma migrate dev\"\n        execSync(migrateCmd, { stdio: \"inherit\" })\n        spinner2.succeed(\"Migrations applied\")\n\n        logger.newline()\n        logger.success(\"Database migration complete!\")\n      } catch (error: any) {\n        logger.newline()\n        logger.error(\"Failed to run migrations\")\n        logger.newline()\n        logger.warn(\"Common issues:\")\n        logger.info(\"  • Check your database credentials in .env\")\n        logger.info(\"  • Make sure the database exists and is running\")\n        logger.info(\"  • Verify your user has the correct permissions\")\n        logger.info(\"  • For MySQL: GRANT ALL PRIVILEGES ON database_name.* TO 'user'@'localhost';\")\n        logger.newline()\n\n        if (error.message || error.stderr) {\n          console.error(error)\n        }\n        process.exit(1)\n      }\n    })\n\n  // db:push - Push schema to database (without regenerating)\n  db.command(\"push\")\n    .description(\"Push Prisma schema to database (no migration files)\")\n    .option(\"--regenerate\", \"Regenerate schema from template before pushing\")\n    .action(async (options?: { regenerate?: boolean }) => {\n      try {\n        // Step 1: Optionally regenerate schema from template\n        if (options?.regenerate) {\n          const spinner1 = logger.spinner(\"Generating Prisma schema from template...\")\n          spinner1.start()\n          await generatePrismaSchema()\n          spinner1.succeed(\"Prisma schema generated from template\")\n        }\n\n        // Step 2: Push to database\n        const spinner2 = logger.spinner(\"Pushing schema to database...\")\n        spinner2.start()\n        execSync(\"npx prisma db push\", { stdio: \"inherit\" })\n        spinner2.succeed(\"Schema pushed to database\")\n\n        logger.newline()\n        logger.success(\"Database push complete!\")\n      } catch (error: any) {\n        logger.newline()\n        logger.error(\"Failed to push schema\")\n        logger.newline()\n        logger.warn(\"Common issues:\")\n        logger.info(\"  • Check your database credentials in .env\")\n        logger.info(\"  • Make sure the database exists and is running\")\n        logger.info(\"  • Verify your user has the correct permissions\")\n        logger.newline()\n\n        if (error.message || error.stderr) {\n          console.error(error)\n        }\n        process.exit(1)\n      }\n    })\n\n  // db:pull - Pull schema from database\n  db.command(\"pull\")\n    .description(\"Introspect database and update Prisma schema\")\n    .option(\"--force\", \"Overwrite existing schema\")\n    .action(async (options: { force?: boolean }) => {\n      try {\n        const spinner = logger.spinner(\"Introspecting database...\")\n        spinner.start()\n\n        const pullCmd = options.force\n          ? \"npx prisma db pull --force\"\n          : \"npx prisma db pull\"\n        execSync(pullCmd, { stdio: \"inherit\" })\n\n        spinner.succeed(\"Database introspected successfully!\")\n        logger.info(\"Run 'shadpanel db:generate' to generate Prisma Client\")\n      } catch (error) {\n        logger.error(\"Failed to pull schema\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:studio - Open Prisma Studio\n  db.command(\"studio\")\n    .description(\"Open Prisma Studio to browse and edit data\")\n    .option(\"-p, --port <port>\", \"Port to run Prisma Studio on\", \"5555\")\n    .option(\"-b, --browser <browser>\", \"Browser to open Prisma Studio in\")\n    .action((options: { port?: string; browser?: string }) => {\n      try {\n        logger.info(`Opening Prisma Studio on port ${options.port || 5555}...`)\n        logger.info(\"Press Ctrl+C to stop\")\n        logger.newline()\n\n        let studioCmd = `npx prisma studio --port ${options.port || 5555}`\n        if (options.browser) {\n          studioCmd += ` --browser ${options.browser}`\n        }\n\n        execSync(studioCmd, { stdio: \"inherit\" })\n      } catch (error) {\n        // User pressed Ctrl+C, exit gracefully\n        logger.newline()\n        logger.info(\"Prisma Studio stopped\")\n        process.exit(0)\n      }\n    })\n\n  // db:seed - Seed the database\n  db.command(\"seed\")\n    .description(\"Seed the database with initial data\")\n    .action(() => {\n      try {\n        const spinner = logger.spinner(\"Seeding database...\")\n        spinner.start()\n        execSync(\"npx prisma db seed\", { stdio: \"inherit\" })\n        spinner.succeed(\"Database seeded successfully!\")\n      } catch (error) {\n        logger.error(\"Failed to seed database\")\n        logger.info(\"Make sure you have a 'prisma.seed' script in package.json\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  // db:reset - Reset the database\n  db.command(\"reset\")\n    .description(\"Reset the database (WARNING: deletes all data)\")\n    .option(\"--force\", \"Skip confirmation prompt\")\n    .action((options: { force?: boolean }) => {\n      try {\n        const resetCmd = options.force\n          ? \"npx prisma migrate reset --force\"\n          : \"npx prisma migrate reset\"\n\n        logger.warn(\"This will delete all data in your database!\")\n        execSync(resetCmd, { stdio: \"inherit\" })\n        logger.success(\"Database reset complete!\")\n      } catch (error) {\n        logger.error(\"Failed to reset database\")\n        console.error(error)\n        process.exit(1)\n      }\n    })\n\n  return db\n}\n","import fs from \"fs-extra\"\nimport path from \"path\"\n\n// Load environment variables from .env file if it exists\nfunction loadEnv() {\n  try {\n    const envPath = path.join(process.cwd(), '.env')\n    if (fs.existsSync(envPath)) {\n      const envContent = fs.readFileSync(envPath, 'utf-8')\n      envContent.split('\\n').forEach(line => {\n        const match = line.match(/^([^=:#]+)=(.*)/)\n        if (match) {\n          const key = match[1].trim()\n          const value = match[2].trim().replace(/^[\"']|[\"']$/g, '')\n          if (!process.env[key]) {\n            process.env[key] = value\n          }\n        }\n      })\n    }\n  } catch (error) {\n    // Silently fail if .env doesn't exist or can't be read\n  }\n}\n\n// Load environment on import\nloadEnv()\n\ntype DatabaseDriver = 'mysql' | 'postgresql' | 'sqlite' | 'mongodb'\n\ninterface DatabaseCredentials {\n  host?: string\n  port?: string\n  database?: string\n  username?: string\n  password?: string\n  schema?: string\n}\n\n/**\n * Get database driver from environment\n * Defaults to 'mysql' if DATABASE_DRIVER is not set\n */\nexport function getDriver(): DatabaseDriver {\n  const driver = process.env.DATABASE_DRIVER as DatabaseDriver\n  return driver || 'mysql'\n}\n\n/**\n * Get database URL from environment\n * Priority:\n * 1. Use DATABASE_URL if it exists\n * 2. Construct URL from individual DATABASE_* credentials\n * 3. Fall back to default SQLite for development\n */\nexport function getUrl(): string {\n  // Priority 1: Use DATABASE_URL directly if provided\n  if (process.env.DATABASE_URL) {\n    return process.env.DATABASE_URL\n  }\n\n  // Priority 2: Construct from individual credentials\n  const credentials: DatabaseCredentials = {\n    host: process.env.DATABASE_HOST,\n    port: process.env.DATABASE_PORT,\n    database: process.env.DATABASE_NAME,\n    username: process.env.DATABASE_USERNAME,\n    password: process.env.DATABASE_PASSWORD,\n    schema: process.env.DATABASE_SCHEMA,\n  }\n\n  const constructedUrl = constructDatabaseUrl(getDriver(), credentials)\n  if (constructedUrl) {\n    return constructedUrl\n  }\n\n  // Priority 3: Fall back to SQLite for development\n  console.warn('No DATABASE_URL or credentials found. Using SQLite fallback.')\n  return 'file:./dev.db'\n}\n\n/**\n * Construct database URL from credentials based on driver type\n */\nfunction constructDatabaseUrl(\n  driver: DatabaseDriver,\n  credentials: DatabaseCredentials\n): string | null {\n  const { host, database } = credentials\n\n  // Check if we have enough credentials to construct a URL\n  if (!host || !database) {\n    return null\n  }\n\n  switch (driver) {\n    case 'mysql':\n      return buildMySQLUrl(credentials)\n\n    case 'postgresql':\n      return buildPostgreSQLUrl(credentials)\n\n    case 'mongodb':\n      return buildMongoDBUrl(credentials)\n\n    case 'sqlite':\n      // SQLite doesn't use host/port, just database path\n      return `file:${database}`\n\n    default:\n      console.warn(`Unsupported driver: ${driver}`)\n      return null\n  }\n}\n\n/**\n * Build MySQL connection URL\n */\nfunction buildMySQLUrl(credentials: DatabaseCredentials): string {\n  const { host, port = '3306', database, username, password, schema } = credentials\n\n  const auth = username && password ? `${username}:${password}@` : ''\n  const schemaParam = schema ? `?schema=${schema}` : ''\n\n  return `mysql://${auth}${host}:${port}/${database}${schemaParam}`\n}\n\n/**\n * Build PostgreSQL connection URL\n */\nfunction buildPostgreSQLUrl(credentials: DatabaseCredentials): string {\n  const { host, port = '5432', database, username, password, schema } = credentials\n\n  const auth = username && password ? `${username}:${password}@` : ''\n  const schemaParam = schema ? `?schema=${schema}` : ''\n\n  return `postgresql://${auth}${host}:${port}/${database}${schemaParam}`\n}\n\n/**\n * Build MongoDB connection URL\n */\nfunction buildMongoDBUrl(credentials: DatabaseCredentials): string {\n  const { host, port = '27017', database, username, password } = credentials\n\n  const auth = username && password ? `${username}:${password}@` : ''\n  const authSource = username ? '?authSource=admin' : ''\n\n  return `mongodb://${auth}${host}:${port}/${database}${authSource}`\n}\n\n/**\n * Generate Prisma schema from template\n */\nexport async function generatePrismaSchema(projectDir?: string): Promise<void> {\n  const baseDir = projectDir || process.cwd()\n  const templatePath = path.join(baseDir, 'prisma', 'schema.prisma.template')\n  const outputPath = path.join(baseDir, 'prisma', 'schema.prisma')\n\n  // Get database configuration\n  const driver = getDriver()\n  const url = getUrl()\n\n  console.log(`📊 Database Driver: ${driver}`)\n  console.log(`🔗 Database URL: ${url.substring(0, 20)}...`)\n\n  // Check if template exists\n  if (!(await fs.pathExists(templatePath))) {\n    console.warn(`⚠️  Template file not found: ${templatePath}`)\n    console.log('Creating default template...')\n\n    // Create a basic template\n    const defaultTemplate = `datasource db {\n  provider = \"{{DATABASE_DRIVER}}\"\n  url      = \"{{DATABASE_URL}}\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// Add your models here\n`\n    await fs.ensureDir(path.dirname(templatePath))\n    await fs.writeFile(templatePath, defaultTemplate)\n  }\n\n  // Read the template\n  let schemaContent = await fs.readFile(templatePath, 'utf-8')\n\n  // Replace placeholders\n  schemaContent = schemaContent\n    .replace(/\\{\\{DATABASE_DRIVER\\}\\}/g, driver)\n    .replace(/\\{\\{DATABASE_URL\\}\\}/g, url)\n\n  // Write the generated schema\n  await fs.ensureDir(path.dirname(outputPath))\n  await fs.writeFile(outputPath, schemaContent)\n\n  console.log(`✅ Generated: ${outputPath}`)\n}\n","import prompts from \"prompts\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\n\nexport type DatabaseDriver = \"mysql\" | \"postgresql\" | \"sqlite\" | \"mongodb\"\nexport type PackageManager = \"npm\" | \"pnpm\" | \"yarn\" | \"bun\"\n\nexport interface DatabaseInitAnswers {\n  driver: DatabaseDriver\n  packageManager: PackageManager\n  installPrisma: boolean\n}\n\nexport async function promptDatabaseInit(prismaAlreadyInstalled: boolean = false): Promise<DatabaseInitAnswers | null> {\n  console.log(\"\\n🗄️  Database Configuration\\n\")\n\n  if (prismaAlreadyInstalled) {\n    console.log(\"✓ Prisma is already installed in this project\\n\")\n  }\n\n  const questions: prompts.PromptObject[] = [\n    {\n      type: \"select\",\n      name: \"driver\",\n      message: \"Which database are you using?\",\n      choices: [\n        { title: \"MySQL\", value: \"mysql\", description: \"MySQL database\" },\n        { title: \"PostgreSQL\", value: \"postgresql\", description: \"PostgreSQL database\" },\n        { title: \"SQLite\", value: \"sqlite\", description: \"SQLite (local file database)\" },\n        { title: \"MongoDB\", value: \"mongodb\", description: \"MongoDB database\" },\n      ],\n      initial: 0,\n    },\n    {\n      type: prismaAlreadyInstalled ? null : \"select\",\n      name: \"packageManager\",\n      message: \"Which package manager do you want to use?\",\n      choices: [\n        { title: \"npm\", value: \"npm\" },\n        { title: \"pnpm\", value: \"pnpm\" },\n        { title: \"yarn\", value: \"yarn\" },\n        { title: \"bun\", value: \"bun\" },\n      ],\n      initial: 0,\n    },\n    {\n      type: prismaAlreadyInstalled ? null : \"confirm\",\n      name: \"installPrisma\",\n      message: \"Install Prisma packages now?\",\n      initial: true,\n    },\n  ]\n\n  try {\n    const answers = await prompts(questions, {\n      onCancel: () => {\n        throw new Error(\"User cancelled the operation\")\n      },\n    })\n\n    // If Prisma is already installed, set default values for skipped questions\n    if (prismaAlreadyInstalled) {\n      answers.installPrisma = false\n      answers.packageManager = \"npm\" // Default, won't be used anyway\n    }\n\n    return answers as DatabaseInitAnswers\n  } catch (error) {\n    return null\n  }\n}\n\nexport async function createEnvFile(\n  projectDir: string,\n  driver: DatabaseDriver\n): Promise<void> {\n  const envPath = path.join(projectDir, \".env\")\n  const envExamplePath = path.join(projectDir, \".env.example\")\n\n  // Create template based on driver\n  const templates = {\n    mysql: `# MySQL Database Configuration\nDATABASE_DRIVER=mysql\nDATABASE_URL=\"mysql://username:password@localhost:3306/database_name\"\n\n# OR use individual credentials (will auto-construct DATABASE_URL):\n# DATABASE_HOST=localhost\n# DATABASE_PORT=3306\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=root\n# DATABASE_PASSWORD=password\n`,\n    postgresql: `# PostgreSQL Database Configuration\nDATABASE_DRIVER=postgresql\nDATABASE_URL=\"postgresql://username:password@localhost:5432/database_name?schema=public\"\n\n# OR use individual credentials (will auto-construct DATABASE_URL):\n# DATABASE_HOST=localhost\n# DATABASE_PORT=5432\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=postgres\n# DATABASE_PASSWORD=password\n# DATABASE_SCHEMA=public\n`,\n    sqlite: `# SQLite Database Configuration\nDATABASE_DRIVER=sqlite\nDATABASE_URL=\"file:./dev.db\"\n`,\n    mongodb: `# MongoDB Database Configuration\nDATABASE_DRIVER=mongodb\nDATABASE_URL=\"mongodb://username:password@localhost:27017/database_name?authSource=admin\"\n\n# OR use individual credentials (will auto-construct DATABASE_URL):\n# DATABASE_HOST=localhost\n# DATABASE_PORT=27017\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=admin\n# DATABASE_PASSWORD=password\n`,\n  }\n\n  const envContent = templates[driver]\n\n  // Check if .env already exists\n  if (await fs.pathExists(envPath)) {\n    // Append to existing .env if DATABASE_DRIVER not already present\n    const existing = await fs.readFile(envPath, \"utf-8\")\n    if (!existing.includes(\"DATABASE_DRIVER\")) {\n      await fs.appendFile(envPath, \"\\n\" + envContent)\n    }\n  } else {\n    // Create new .env\n    await fs.writeFile(envPath, envContent)\n  }\n\n  // Create .env.example with template for all drivers\n  const exampleContent = `# Database Configuration\n# Choose your database driver and configure accordingly\n\n# ===== MySQL =====\n# DATABASE_DRIVER=mysql\n# DATABASE_URL=\"mysql://username:password@localhost:3306/database_name\"\n\n# ===== PostgreSQL =====\n# DATABASE_DRIVER=postgresql\n# DATABASE_URL=\"postgresql://username:password@localhost:5432/database_name?schema=public\"\n\n# ===== SQLite =====\n# DATABASE_DRIVER=sqlite\n# DATABASE_URL=\"file:./dev.db\"\n\n# ===== MongoDB =====\n# DATABASE_DRIVER=mongodb\n# DATABASE_URL=\"mongodb://username:password@localhost:27017/database_name?authSource=admin\"\n\n# ===== Alternative: Individual Credentials =====\n# The system will auto-construct DATABASE_URL from these:\n# DATABASE_HOST=localhost\n# DATABASE_PORT=3306\n# DATABASE_NAME=mydb\n# DATABASE_USERNAME=root\n# DATABASE_PASSWORD=password\n# DATABASE_SCHEMA=public\n`\n\n  if (await fs.pathExists(envExamplePath)) {\n    const existing = await fs.readFile(envExamplePath, \"utf-8\")\n    if (!existing.includes(\"DATABASE_DRIVER\")) {\n      await fs.appendFile(envExamplePath, \"\\n\" + exampleContent)\n    }\n  } else {\n    await fs.writeFile(envExamplePath, exampleContent)\n  }\n}\n"],"mappings":"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","names":["Command","path","fs","projectDir","directoryExists","fs","path","path","fs","fs","path","fs","path","execSync","fs","execSync","__filename","__dirname","path","fs","execSync","path","fs","fs","path","prompts","fs","path","createEnvFile","path","fs","createEnvFile","execSync","Command"]}